terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.paulo-ec2 will be created
  + resource "aws_instance" "paulo-ec2" {
      + ami                                  = "ami-00c8f89961198e9a5"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = "us-east-1a"
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "kp"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "env" = "dev"
        }
      + tags_all                             = {
          + "env" = "dev"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # aws_security_group.aws_sg_east_1 will be created
  + resource "aws_security_group" "aws_sg_east_1" {
      + arn                    = (known after apply)
      + description            = "Egress and ingress rules"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "aws_sg_east_1"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # module.public_subnet_id.aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "name" = "vpc-igw"
        }
      + tags_all = {
          + "name" = "vpc-igw"
        }
      + vpc_id   = (known after apply)
    }

  # module.public_subnet_id.aws_route_table.public_rt will be created
  + resource "aws_route_table" "public_rt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + core_network_arn           = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags_all         = (known after apply)
      + vpc_id           = (known after apply)
    }

  # module.public_subnet_id.aws_route_table_association.public_rt_association will be created
  + resource "aws_route_table_association" "public_rt_association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.public_subnet_id.aws_subnet.private will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.10.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "private"
        }
      + tags_all                                       = {
          + "Name" = "private"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.public_subnet_id.aws_subnet.public will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.10.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "public"
        }
      + tags_all                                       = {
          + "Name" = "public"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.public_subnet_id.aws_vpc.mydefaultvpc will be created
  + resource "aws_vpc" "mydefaultvpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.10.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "vpcteste"
        }
      + tags_all                             = {
          + "Name" = "vpcteste"
        }
    }

Plan: 8 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.public_subnet_id.aws_vpc.mydefaultvpc: Creating...
module.public_subnet_id.aws_vpc.mydefaultvpc: Creation complete after 5s [id=vpc-0d2a7a652a379ce84]
module.public_subnet_id.aws_internet_gateway.igw: Creating...
module.public_subnet_id.aws_subnet.private: Creating...
aws_security_group.aws_sg_east_1: Creating...
module.public_subnet_id.aws_subnet.public: Creating...
module.public_subnet_id.aws_internet_gateway.igw: Creation complete after 2s [id=igw-0c447c7472b5245e6]
module.public_subnet_id.aws_subnet.private: Creation complete after 2s [id=subnet-0bd05923ee8b60efb]
module.public_subnet_id.aws_route_table.public_rt: Creating...
aws_security_group.aws_sg_east_1: Creation complete after 4s [id=sg-070338c17a9a19e2a]
module.public_subnet_id.aws_route_table.public_rt: Creation complete after 2s [id=rtb-0c35979110adc0021]
module.public_subnet_id.aws_subnet.public: Still creating... [10s elapsed]
module.public_subnet_id.aws_subnet.public: Creation complete after 12s [id=subnet-05327b3ace71f3077]
module.public_subnet_id.aws_route_table_association.public_rt_association: Creating...
aws_instance.paulo-ec2: Creating...
module.public_subnet_id.aws_route_table_association.public_rt_association: Creation complete after 1s [id=rtbassoc-006715fa26a427909]
aws_instance.paulo-ec2: Still creating... [10s elapsed]
aws_instance.paulo-ec2: Still creating... [20s elapsed]
aws_instance.paulo-ec2: Still creating... [30s elapsed]
aws_instance.paulo-ec2: Creation complete after 36s [id=i-0c366e890b76bef35]

Apply complete! Resources: 8 added, 0 changed, 0 destroyed.
╭─paulocosta@POTTESEGBH3613N ~/ec2-instance 
╰─$ ssh -i ~/.ssh/kp.pem  ubuntu@18.209.35.88            
The authenticity of host '18.209.35.88 (18.209.35.88)' can't be established.
ED25519 key fingerprint is SHA256:n2wL/tT25hvIwylFfGMQQmrszgnEY5gpYz+4EY69M8s.
This key is not known by any other names